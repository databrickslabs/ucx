[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
sources = ["src"]
include = ["src"]

[project]
name = "databricks-labs-ucx"
dynamic = ["version"]
description = 'UCX - Unity Catalog Migration Toolkit'
readme = "README.md"
license-files = { paths = ["LICENSE", "NOTICE"] }
requires-python = ">=3.10"
keywords = ["Databricks", "Unity Catalog"]
authors = [
    { name = "Serge Smertin", email = "serge.smertin@databricks.com" },
    { name = "Ivan Trusov", email = "ivan.trusov@databricks.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: Other/Proprietary License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = ["databricks-sdk~=0.17.0",
                "databricks-labs-blueprint",
                "PyYAML>=6.0.0,<7.0.0"]

[project.entry-points.databricks]
runtime = "databricks.labs.ucx.runtime:main"

[project.urls]
Issues = "https://github.com/databricks/ucx/issues"
Source = "https://github.com/databricks/ucx"

[tool.hatch.version]
path = "src/databricks/labs/ucx/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
    "pytest-xdist",
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-mock>=3.0.0,<4.0.0",
    "pytest-timeout",
    "black>=23.1.0",
    "ruff>=0.0.243",
    "isort>=2.5.0",
    "mypy",
    "types-PyYAML",
    "types-requests",
]

python="3.10"

# store virtual env as the child of this folder. Helps VSCode (and PyCharm) to run better
path = ".venv"

[tool.hatch.envs.default.scripts]
test        = "pytest -n auto --cov src --cov-report=xml --timeout 30 tests/unit --durations 20"
coverage    = "pytest -n auto --cov src tests/unit --timeout 30 --cov-report=html --durations 20"
integration = "pytest -n 10 --cov src tests/integration --durations 20"
fmt         = ["isort .",
               "black .",
               "ruff  . --fix",
               "mypy ."]
verify      = ["black --check .",
               "isort . --check-only",
               "ruff .",
               "mypy ."]

[tool.isort]
skip_glob = ["notebooks/*.py"]
profile = "black"

[tool.pytest.ini_options]
addopts = "-s -p no:warnings -vv --cache-clear"
cache_dir = ".venv/pytest-cache"

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
cache-dir = ".venv/ruff-cache"
target-version = "py310"
line-length = 120
select = [
    "A",
    "ARG",
    "B",
    "C",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords and SQL statement construction
    "S105", "S106", "S107", "S603", "S608",
    # Allow print statements
    "T201",
    # Allow asserts
    "S101",
    # Allow standard random generators
    "S311",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Ignore flaky Import block is un-sorted or un-formatted
    "I001",
    # Ignore Exception must not use a string literal, assign to variable first
    "EM101",
]
extend-exclude = [
    "notebooks/*.py"
]

[tool.ruff.isort]
known-first-party = ["databricks.labs.ucx"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]

"tests/**/*" = [
    "PLR2004", "S101", "TID252", # tests can use magic values, assertions, and relative imports
    "ARG001" # tests may not use the provided fixtures
]

"src/databricks/labs/ucx/mixins/redash.py" = ["A002", "A003", "N815"]

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
omit = ["src/databricks/labs/ucx/mixins/*", "*/working-copy/*", "*/fresh_wheel_file/*"]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
